authelia:
  ## Image Parameters
  ## ref: https://hub.docker.com/r/authelia/authelia/tags/
  ##
  image:
    # registry: docker.io
    registry: ghcr.io
    repository: authelia/authelia
    tag: "4.37.5"
    pullPolicy: IfNotPresent
    pullSecrets: []
    # pullSecrets:
    #   - myPullSecretName

  ## Authelia Domain
  ## Should be the root domain you want to protect.
  ## For example if you have apps app1.example.com and app2.example.com it should be example.com
  ## This affects the ingress (partially sets the domain used) and configMap.
  ## Authelia must be served from the domain or a subdomain under it.
  domain: amrap030.site

  ingress:
    enabled: false

  pod:
    # Must be Deployment, DaemonSet, or StatefulSet.
    kind: Deployment

    replicas: 1
    
    extraVolumeMounts:
      - name: users-database
        mountPath: /config/users_database.yml
        subPath: users_database.yml
    extraVolumes:
      - name: users-database
        secret:
          secretName: users-database

  ##
  ## Authelia Config Map Generator
  ##
  configMap:
    # Enable the configMap source for the Authelia config.
    # If this is false you need to provide a volumeMount via PV/PVC or other means that mounts to /config.
    enabled: true

    key: configuration.yaml

    existingConfigMap: ""

    ##
    ## Authentication Backend Provider Configuration
    ##
    ## Used for verifying user passwords and retrieve information such as email address and groups users belong to.
    ##
    ## The available providers are: `file`, `ldap`. You must use one and only one of these providers.
    authentication_backend:
      ## LDAP backend configuration.
      ##
      ## This backend allows Authelia to be scaled to more
      ## than one instance and therefore is recommended for
      ## production.
      ldap:
        ## Enable LDAP Backend.
        enabled: false

      ##
      ## File (Authentication Provider)
      ##
      ## With this backend, the users database is stored in a file which is updated when users reset their passwords.
      ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia
      ## to be scaled to more than one instance. The options under 'password' have sane defaults, and as it has security
      ## implications it is highly recommended you leave the default values. Before considering changing these settings
      ## please read the docs page: https://www.authelia.com/reference/guides/passwords/#tuning
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/overview/authorization/statelessness/
      ##
      file:
        enabled: true
        path: /config/users_database.yml
      
    ##
    ## Access Control Configuration
    ##
    ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
    ##
    ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
    ## to anyone. Otherwise restrictions follow the rules defined.
    ##
    ## Note: One can use the wildcard * to match any subdomain.
    ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
    ##
    ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
    ##
    ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
    ##
    ## - 'domain' defines which domain or set of domains the rule applies to.
    ##
    ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
    ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
    ##    'user:<username>' or 'group:<groupname>'.
    ##
    ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
    ##
    ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
    ##   is optional and matches any resource if not provided.
    ##
    ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
    access_control:
      ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
      ## resource if there is no policy to be applied to the user.
      default_policy: deny

      rules:
        - domain_regex: '^.*\.amrap030.site$'
          policy: two_factor

    ##
    ## Storage Provider Configuration
    ##
    ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
    storage:
      ##
      ## Local (Storage Provider)
      ##
      ## This stores the data in a SQLite3 Database.
      ## This is only recommended for lightweight non-stateful installations.
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/overview/authorization/statelessness/
      ##
      local:
        enabled: true
        path: /config/db.sqlite3

      ##
      ## MySQL (Storage Provider)
      ##
      ## Also supports MariaDB
      ##
      mysql:
        enabled: false

      ##
      ## PostgreSQL (Storage Provider)
      ##
      postgres:
        enabled: false
        
    ##
    ## Notification Provider
    ##
    ##
    ## Notifications are sent to users when they require a password reset, a u2f registration or a TOTP registration.
    ## The available providers are: filesystem, smtp. You must use one and only one of these providers.
    notifier:
      ##
      ## File System (Notification Provider)
      ##
      ## Important: Kubernetes (or HA) users must read https://www.authelia.com/overview/authorization/statelessness/
      ##
      filesystem:
        enabled: true
        filename: /config/notification.txt

    identity_providers:
      oidc:
        ## Enables this in the config map. Currently in beta stage.
        ## See https://www.authelia.com/r/openid-connect/
        enabled: true

        ## The issuer_certificate_chain is an optional PEM encoded certificate chain. It's used in conjunction with the
        ## issuer_private_key to sign JWT's. All certificates in the chain must be within the validity period, and every
        ## certificate included must be signed by the certificate immediately after it if provided.
        issuer_certificate_chain: |
          -----BEGIN CERTIFICATE-----
          MIIDETCCAfmgAwIBAgIQYngH8k+2N2vJ5B9UhK54BzANBgkqhkiG9w0BAQsFADAp
          MREwDwYDVQQKEwhBdXRoZWxpYTEUMBIGA1UEAxMLZXhhbXBsZS5jb20wHhcNMjMx
          MDA0MTI1MTAyWhcNMjQxMDAzMTI1MTAyWjApMREwDwYDVQQKEwhBdXRoZWxpYTEU
          MBIGA1UEAxMLZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
          AoIBAQCkZBtRIQu8NcniQC7/PyEKBAWXrPzKxKVzJzNZ04yFfiJPC1aq0hBeowbi
          38piO0+IzA/LKNNHvidvQY114xLglyW02TAtr4CKo8R/BLkuLB1R/XuFqIJ0j5MT
          AeXusVc0YAeN1NwLQHMFyQ6+kBHn45JYyUl7BHwbMYlae7JVHvFwvJKYTmkVTdRW
          WOnmpbjAvHtd2xWmVjc1RQL84BWKEiPwyJtxRDMp8Qhhr68mQdBzoKReVrxOpZ4c
          hcT9Xckrl+Kdzl/O9WyZ/7DNKHj+4bUtlzjp8nXOo49gMh4DheT7tdL9jH0Id/Tf
          lB7OnnbZSFBXLLHcXMjDb+zIS9OdAgMBAAGjNTAzMA4GA1UdDwEB/wQEAwIFoDAT
          BgNVHSUEDDAKBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUA
          A4IBAQAyxPc13379eYNgu7eAoHlJ7uupGvCZpivuFwWdXMv0wSjcUf+Dm5Kah7NS
          BXGEEyYxzSpH4xhrl7Dgzi0Yxsd3gna7hgXLj+KN3BqQSB89oXsE/4WotNj8ATGw
          kk76ygglOt8j4rSXYHcD4VB/h0+/SFdANLVIrgOnTAzYljgK5pynbWceuZAjq+Qo
          yH82zHng5EnwwWVqEA8SAaDTqqlfPah5a2TlOEgx2cwpD+61AE8xupY+wVuwhlC6
          p+QiP8HiBYuc4NR7gWxhiPp+8Wt7qTTXwjqplIT02NJpOHibkQKfI+5Xj1wEwXC0
          Nw+3AVppeTsMAhRm5o3/bIKNbtnc
          -----END CERTIFICATE-----
        
        clients:
          - id: cloudflare
            description: Cloudflare ZeroTrust
            secret: '$pbkdf2-sha512$310000$9qoahWKzgfG38kDUcI/1jw$0OsFl7BvwD1t8NqaVaj6BPD2/Br684fozJwifgfDjONlgP5FwintZ1QkjN3f5sqNBeVDnRGOuL8ukGti2TglJg'  # The digest of 'insecure_secret'.
            public: false
            authorization_policy: two_factor
            redirect_uris:
              - https://amrap030.cloudflareaccess.com/cdn-cgi/access/callback
            scopes:
              - openid
              - profile
              - email
            userinfo_signing_algorithm: none
        
  ##
  ## Authelia Secret Generator.
  ##
  ## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
  ## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
  ## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
  ##
  secret:
    existingSecret: "authelia-secrets"
    # existingSecret: authelia

    mountPath: /secrets

    ## Secrets.
    jwt:
      key: JWT_TOKEN
      value: ""
      filename: JWT_TOKEN
    ldap:
      key: LDAP_PASSWORD
      value: ""
      filename: LDAP_PASSWORD
    storage:
      key: STORAGE_PASSWORD
      value: ""
      filename: STORAGE_PASSWORD
    storageEncryptionKey:
      key: STORAGE_ENCRYPTION_KEY
      value: ""
      filename: STORAGE_ENCRYPTION_KEY
    session:
      key: SESSION_ENCRYPTION_KEY
      value: ""
      filename: SESSION_ENCRYPTION_KEY
    duo:
      key: DUO_API_KEY
      value: ""
      filename: DUO_API_KEY
    redis:
      key: REDIS_PASSWORD
      value: ""
      filename: REDIS_PASSWORD
    redisSentinel:
      key: REDIS_SENTINEL_PASSWORD
      value: ""
      filename: REDIS_SENTINEL_PASSWORD
    smtp:
      key: SMTP_PASSWORD
      value: ""
      filename: SMTP_PASSWORD
    oidcPrivateKey:
      key: OIDC_PRIVATE_KEY
      value: ""
      filename: OIDC_PRIVATE_KEY
    oidcHMACSecret:
      key: OIDC_HMAC_SECRET
      value: ""
      filename: OIDC_HMAC_SECRET

  ##
  ## Authelia Persistence Configuration.
  ##
  ## Useful in scenarios where you need persistent storage.
  ## Auth Provider Use Case: file; we recommend you use the ldap provider instead.
  ## Storage Provider Use Case: local; we recommend you use the mysql/mariadb or postgres provider instead.
  ## Configuration Use Case: when you want to manually configure the configuration entirely (set configMap.enabled = false).
  ##
  persistence:
    enabled: true

    readOnly: false
    subPath: ""

    existingClaim: "authelia-data"

    storageClass: "longhorn"

    ## Persistent Volume Name
    ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one
    ##
    volumeName: ""

    accessModes:
      - ReadWriteOnce

    size: 100Mi

    selector: {}